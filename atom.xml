<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[阿正的博客]]></title>
  <subtitle><![CDATA[记录点滴生活]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://junzhengdi.github.io/"/>
  <updated>2015-04-27T13:24:40.000Z</updated>
  <id>http://junzhengdi.github.io/</id>
  
  <author>
    <name><![CDATA[阿正]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Git全局ignore配置]]></title>
    <link href="http://junzhengdi.github.io/2015/04/27/Git%E5%85%A8%E5%B1%80ignore%E9%85%8D%E7%BD%AE/"/>
    <id>http://junzhengdi.github.io/2015/04/27/Git全局ignore配置/</id>
    <published>2015-04-27T13:24:06.000Z</published>
    <updated>2015-04-27T13:24:40.000Z</updated>
    <content type="html"><![CDATA[<h2 id="-gitconfig文件">.gitconfig文件</h2><ul>
<li>git默认将全局配置放在当前用户目录下的.gitconfig文件，例如：C:/Users/dijunzheng/.gitconfig </li>
<li>编辑，在后边加上</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[core]   </span><br><span class="line">excludesfile =<span class="constant">C</span><span class="symbol">:/Users/dijunzheng/</span>.gitignore_global</span><br></pre></td></tr></table></figure>
<h2 id="-gitignore_global">.gitignore_global</h2><ul>
<li>新建并配置.gitignore_global，目录就是提到的目录</li>
<li>可能要用git命令 touch .gitignore_global</li>
<li>内容</li>
</ul>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">.settings/</span></span><br><span class="line"><span class="title">.svn/</span></span><br><span class="line">bin/</span><br><span class="line"><span class="title">.class</span></span><br><span class="line">logs/</span><br></pre></td></tr></table></figure>
<h2 id="齐活儿">齐活儿</h2>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="-gitconfig文件">.gitconfig文件</h2><ul>
<li>git默认将全局配置放在当前用户目录下的.gitconfig文件，例如：C:/Users/dijunzheng/.gitconfig </li>
<li>编辑，在后边加上</li>
<]]>
    </summary>
    
      <category term="git" scheme="http://junzhengdi.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[git服务总结]]></title>
    <link href="http://junzhengdi.github.io/2015/04/27/git%E6%9C%8D%E5%8A%A1%E6%80%BB%E7%BB%93/"/>
    <id>http://junzhengdi.github.io/2015/04/27/git服务总结/</id>
    <published>2015-04-27T12:59:39.000Z</published>
    <updated>2015-04-27T13:05:36.000Z</updated>
    <content type="html"><![CDATA[<h3 id="git服务位置">git服务位置</h3><ul>
<li>git安装在小机房：192.168.1.67 root/rootroot</li>
<li>新建一个用户git,checkin checkout都用这个用户操作，请确保git代码目录的归属权是git而不是root</li>
<li>代码根目录  /opt/git/</li>
</ul>
<h3 id="在服务器上安装git">在服务器上安装git</h3><ul>
<li>安装准备的软件<br><code>$ yum -y install zlib-devel openssl-devel perl cpio expat-devel gettext-devel openssl zlib curl autoconf tk</code></li>
<li>下载git源码<br><code>$ wget https://github.com/git/git/archive/master.zip</code></li>
<li>解压<br><code>$ unzip master</code></li>
<li><code>$ cd git-master/</code></li>
<li><code>$ autoconf</code></li>
<li><code>$ ./configure</code></li>
<li><code>$ make</code></li>
<li><code>$ make install</code><br>make和make install在这里最好分开执行,免得有错不知道.</li>
<li><code>$ git --version</code><br><code>git version 2.0.0.GIT</code></li>
</ul>
<p>安装完毕</p>
<h3 id="在服务器上git的权限管理及建立仓库">在服务器上git的权限管理及建立仓库</h3><ul>
<li>创建一个git用户，用来运行git<br><code>$ adduser git</code></li>
<li>创建证书登录<br>收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。<br>例如，我的公钥在我本地的电脑C:\Users\dijunzheng.ssh\id_rsa.pub 中，打开该文件，copy文本加入上述文件即可</li>
<li>初始化Git仓库：<br>先选定一个目录作为Git仓库，假定是/opt/git/learngit.git，在/opt/git/目录下输入命令：<br><code>$ sudo git init --bare learngit.git</code><br>Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git：<br><code>$ sudo chown -R git:git learngit.git</code></li>
<li>禁用shell登录：<br>出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：<br><code>git:x:1001:1001:,,,:/home/git:/bin/bash</code><br>改为：<br><code>git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell</code><br>这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。</li>
<li>管理公钥<br>如果团队很小，把每个人的公钥收集起来放到服务器的/home/git/.ssh/authorized_keys文件里就是可行的。如果团队有几百号人，就没法这么玩了，这时，可以用Gitosis来管理公钥。<br>这里我们不介绍怎么玩Gitosis了，几百号人的团队基本都在500强了，相信找个高水平的Linux管理员问题不大。</li>
<li>管理权限<br>有很多不但视源代码如生命，而且视员工为窃贼的公司，会在版本控制系统里设置一套完善的权限控制，每个人是否有读写权限会精确到每个分支甚至每个目录下。因为Git是为Linux源代码托管而开发的，所以Git也继承了开源社区的精神，不支持权限控制。不过，因为Git支持钩子（hook），所以，可以在服务器端编写一系列脚本来控制提交等操作，达到权限控制的目的。Gitolite就是这个工具。<br>这里我们也不介绍Gitolite了，不要把有限的生命浪费到权限斗争中。</li>
<li>小结<br>搭建Git服务器非常简单，通常10分钟即可完成；<br>要方便管理公钥，用Gitosis；<br>要像SVN那样变态地控制权限，用Gitolite。</li>
</ul>
<h3 id="从服务器上下载（clone）代码">从服务器上下载（clone）代码</h3><ul>
<li>首先 cd 到你的workspace，例如我的是/d/mywork/</li>
<li>然后克隆代码<br><code>$ git clone git@192.168.1.67:/opt/git/learngit.git learngit</code><br>注：learngit是自己重命名的代码目录，这样就在我的/d/mywork/learngit目录下面生成具体的代码文件</li>
</ul>
<h3 id="git_创建裸仓库，将项目变为git可管理的仓库">git 创建裸仓库，将项目变为git可管理的仓库</h3><p>通过git init命令把这个目录变成Git可以管理的仓库：</p>
<p>$ cd d:/mywork/training4g/  ###进入到项目根目录$ git init<br>Initialized empty Git repository in d:/mywork/training4g/.git/</p>
<h3 id="程序员如何利用git提交代码">程序员如何利用git提交代码</h3><ul>
<li>将本地库与远程库关联<br><code>$ git remote add origin git@192.168.1.67:/opt/git/learngit.git</code><br>注：origin是远程库的名称，如果你的远程库已存在（例如github已占用），请自行改成其他的名字。</li>
<li>把本地库的所有内容推送到远程库上：<br><code>$ git push -u origin master</code><br>把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。<br>由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。<br><code>$ git push origin master</code></li>
</ul>
<h3 id="推送分支">推送分支</h3><p>推送到远程的master分支<br><code>$ git push origin master</code><br>如果要推送其他分支，比如dev，就改成：<br><code>$ git push origin dev</code></p>
<p>但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？</p>
<ul>
<li>master分支是主分支，因此要时刻与远程同步</li>
<li>dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；</li>
<li>bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；</li>
<li>feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。</li>
</ul>
<h3 id="查看分支">查看分支</h3><p><code>$ git branch</code></p>
<h3 id="抓取分支">抓取分支</h3><p>从远程服务器，抓取当前分支，同步到本地，相当于svn的update<br><code>$ git pull</code><br>注：从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。</p>
<h3 id="查看远程版本">查看远程版本</h3><p><code>$ git remote -v</code></p>
<p>未完待续</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="git服务位置">git服务位置</h3><ul>
<li>git安装在小机房：192.168.1.67 root/rootroot</li>
<li>新建一个用户git,checkin checkout都用这个用户操作，请确保git代码目录的归属权是git而不是]]>
    </summary>
    
      <category term="git" scheme="http://junzhengdi.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[别做正常的傻瓜-读书笔记1]]></title>
    <link href="http://junzhengdi.github.io/2015/04/25/noshagua1/"/>
    <id>http://junzhengdi.github.io/2015/04/25/noshagua1/</id>
    <published>2015-04-25T14:15:13.000Z</published>
    <updated>2015-04-26T10:18:30.000Z</updated>
    <content type="html"><![CDATA[<h1 id="零、序言">零、序言</h1><h2 id="1_引文的例子">1 引文的例子</h2><ul>
<li>如果你有一种病5年内有万分之一的概率会死，你愿意花多少钱买药（这种药可以根治此病）？</li>
<li>如果有一个实验让你试药，这种药物任何副作用，只是在5年内，有万分之一的概率会让你死亡，问你愿意为此向此实验要多少钱？</li>
<li>两者应完全等价，因为说的都是一回事。是5年内万分之一的死亡率和金钱的权衡。</li>
<li>结论：正常的傻瓜都不是理性的，会陷入误区</li>
</ul>
<h2 id="2_行为决策学">2 行为决策学</h2><ul>
<li>本书的理论基础</li>
<li>分支：行为经济学和行为金融学</li>
</ul>
<h2 id="3_目的：">3 目的：</h2><ul>
<li>揭示人们在工作和生活中熟视无睹的误区</li>
<li>并教你如何纠正</li>
</ul>
<h2 id="4_本书结构">4 本书结构</h2><ul>
<li>1-12章：投资、购买、经营方面的误区和偏差，以及产生原因</li>
<li>13-14：幸福方面。介绍16种方法增加幸福（财富不变）</li>
</ul>
<h1 id="一、10元等于两个5元吗？心里账户对行为的影响">一、10元等于两个5元吗？心里账户对行为的影响</h1><h2 id="1_心理账户">1 心理账户</h2><ul>
<li>人们把实际上客观等价的收入和支出在心理上划分到不同的账户</li>
<li>心理账户影响投资决策：eg：已抛售股票的亏损和未抛售的股票亏损就划入不同的心理账户。</li>
<li>心理账户影响日常消费决策。eg：听音乐会时门票的丢失的损失和同等价值电话卡丢失的损失，被划入不同的心理账户。</li>
<li>心理账户的误区：对待每一块钱不是一视同仁的，而是视他们来自何方、去往何处采取不同的态度</li>
<li>破解之法：不要人为设置心理账户，或者说应该让财富在各个心理账户间互相流通。如果一个账户超值了，应该从其他账户挪过来一些。</li>
</ul>
<h2 id="2_心理账户的典型划分：视收入来源不同，收入时间不同，划分不同账户">2 心理账户的典型划分：视收入来源不同，收入时间不同，划分不同账户</h2><ul>
<li>收入时间不同，划分不同账户。eg：下雨天出租车司机司机挣钱容易（有效率的时候），就下班早，而晴天挣钱难（效率低的时候），就下班晚。最经济的做法是：雨天（效率高）多干多挣，晴天（效率低）少干少挣。</li>
<li>收入来源不同导致消费倾向和风险偏好不同。eg：赌博赢来的钱很容易消费掉，而辛苦挣来的钱容易存起来。</li>
<li>大钱小花，小钱大花。eg：正常的傻瓜总是得到一大笔钱时不愿意花，而在得到小笔收入时更容易花掉</li>
<li>破解之法：钱是等价的，不要人为打上记号，要对不同来源、不同时间和不同数额的收入一视同仁。</li>
</ul>
<h2 id="3_总结：破解之法">3 总结：破解之法</h2><ul>
<li>换位法</li>
<li>eg：股票的例子。不知道在跌了之后是否要卖掉还是继续持有？换位！想象现在没买，你会不会决定买入这支股票。如果是，就持有，如果不是，就抛掉。这样决策就是一致的。</li>
<li>eg：音乐会的例子，丢了票之后，纠结要不要再买一张去看？？换位！想象自己丢的不是票，而是其他等价的东西，会不会花钱买票去听音乐会呢？</li>
</ul>
<h1 id="二、你买过不需要的东西吗？——交易偏见">二、你买过不需要的东西吗？——交易偏见</h1><p>某买决策占据我们日常很大的比重。通常我们认为决策依据：改物品对自己的效用，即东西有没有用。<br>但你买过没有用的东西吗？？</p>
<h2 id="1、合算交易偏见">1、合算交易偏见</h2><ul>
<li>理性的决策。性能价格比：性能，改物品给我们带来的效用；价格，现在的价格是否能接受，比起性能来我是否愿意花这么多钱。</li>
<li>实际中会遭遇合算交易偏见的陷阱：就是交易带来的效用，即商品的参考价格和商平的实际价格之间差额的效用。</li>
<li>正常的傻瓜会在交易中受到无关参考值的影响，过多考虑参考价格和商品实际价格之间的差额。</li>
<li>相对的还有“不合算交易偏见”。eg：刚刚打5折结束的东西，很少有人会买。应该考虑性能价格比</li>
<li>破解之法：只考虑商品能够带来的真正效用和你为此付出的成本。</li>
</ul>
<h2 id="2、比例偏见">2、比例偏见</h2><ul>
<li>实际就是折扣的问题。eg：把20块的东西还价还到15，比125的东西还价还到120更有成就感。</li>
<li>正常的傻瓜消费时，通常更加关注优惠的比例而不是优惠的绝对值。</li>
<li>在小地方斤斤计较，在大事上麻木不仁。但大处省下的比小地方不知道多多少倍。eg：我们可以花10分钟将一件200元的衣服砍价到150元而沾沾自喜，却不肯花200倍的精力在购买100万的房子时争取1%的优惠。</li>
<li>破解:要考虑优惠的绝对数额（而不是比例）和为此付出的成本。</li>
</ul>
<h2 id="3、总结">3、总结</h2><ul>
<li>做决策时不要受到成本和收益之外的因素影响。</li>
<li>唯一需要关注的是物品能带来的真实效用（性能）和为此你需要付出的成本。</li>
<li>不忍心放过看似合算的交易往往时候让你后悔</li>
<li>理性决策：只权衡绝对收益和绝对成本</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="零、序言">零、序言</h1><h2 id="1_引文的例子">1 引文的例子</h2><ul>
<li>如果你有一种病5年内有万分之一的概率会死，你愿意花多少钱买药（这种药可以根治此病）？</li>
<li>如果有一个实验让你试药，这种药物任何副作用，只是在5年]]>
    </summary>
    
      <category term="不做正常的傻瓜" scheme="http://junzhengdi.github.io/tags/%E4%B8%8D%E5%81%9A%E6%AD%A3%E5%B8%B8%E7%9A%84%E5%82%BB%E7%93%9C/"/>
    
      <category term="心理" scheme="http://junzhengdi.github.io/tags/%E5%BF%83%E7%90%86/"/>
    
  </entry>
  
</feed>